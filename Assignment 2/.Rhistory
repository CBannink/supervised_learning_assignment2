# Option 1 making the harder predictor "good", since most datapoints are considered bad wines in this case
white_wine <- white_wine %>%
mutate(group = factor(ifelse(quality < 7, "Bad", "Good")))
# Option 2 duplicating the "Bad" grouped wines to correct for the skewness of the data.
white_wine_duplicated <- white_wine %>%
mutate(group = factor(ifelse(quality < 6, "Bad", "Good")))
bad_indices <- which(white_wine_duplicated$group == "Bad")
# Duplicate the "Bad" class instances
duplicated_data <- white_wine_duplicated[bad_indices, ]
# Combine the duplicated instances with the original dataset
balanced_data <- rbind(white_wine_duplicated, duplicated_data)
white_wine_duplicated <- balanced_data
Original <- white_wine %>%
ggplot(aes(x = quality))+
geom_bar(fill = "dark grey")+
labs(xlab = "quality",
ylab = "count",
title = "Distribution of wine quality scores")+
theme_minimal()
Option1 <- white_wine_duplicated %>%
ggplot(aes(x = quality, fill = group))+
geom_bar()+
#facet_wrap(~group)+
labs(xlab = "quality",
ylab = "count",
title = "After duplication of Bad group" )+
theme_minimal()
Option2 <- white_wine %>%
ggplot(aes(x = quality, fill = group))+
geom_bar()+
#facet_wrap(~group)+
labs(xlab = "quality",
ylab = "count",
title = "After change of Good/Bad cut-off (<7)")+
theme_minimal()
supp.fig1 <- ggarrange(Original, ggarrange(Option1, Option2, labels = c("B","C"), ncol=2), nrow = 2, labels = "A")
annotate_figure(supp.fig1, top = text_grob("Dataset distribution of white wines", color = "black", face = "bold", size = 14))
set.seed(123)
white_wine <- white_wine %>%
select(!(quality))
white_wine <- white_wine %>%
mutate(split = sample(c(rep("Test",490), rep("Train", 4408))))
#Remove the quality score to prevent basing the classification on the quality score.
white_wine_duplicated <- white_wine_duplicated %>%
select(!(quality))
white_wine_duplicated <- white_wine_duplicated %>%
mutate(split = sample(c(rep("Test",653), rep("Train", 5885))))
#all datasets (dataset with bad classification if <7 or <6 but with bad instances duplicated for even distribution)
wwTrain <- white_wine %>% filter(split =="Train") %>%subset(select = -split)
wwTest <- white_wine %>% filter(split =="Test") %>% subset(select=-split)
wwTrain_duplicated <- white_wine_duplicated %>% filter(split =="Train") %>% subset(select = -split)
wwTest_duplicated <- white_wine_duplicated %>% filter(split =="Test") %>% subset(select= -split)
ncol_train <- ncol(wwTrain)
ncol_train_duplicated <- ncol(wwTrain_duplicated)
#simple models grid search
grid_simple <- expand.grid(cp = c(0.01, 0.001, 1, 0.1))
model_simple <- train(group ~ ., data = wwTrain, method = "rpart", trControl = trainControl(method = "repeatedcv",number = 10, repeats = 3), metric = "Accuracy", tuneGrid = grid_simple)
model_simple_duplicated <- train(group ~ ., data = wwTrain_duplicated, method = "rpart", trControl = trainControl(method = "repeatedcv",number = 10, repeats = 3), metric="Accuracy", tuneGrid = grid_simple)
#choose the best model with settings
best_model_simple <- model_simple$finalModel
best_model_simple_duplicated <- model_simple_duplicated$finalModel
#this function converts probabilities to classes, threshold can be set to improve overal accuracy if (experiment)
probToClass <- function(pred){
pred <- data.frame(pred)
result_df <- data.frame(predicted_class = ifelse(pred$Good >= 0.5, "Good", "Bad"))
return(result_df)
}
#convert classes and target classes to an accuracy measure
getAcc <- function(target_class, pred_class){
return(mean(target_class == pred_class))
}
# confusion matrix simple model
factor_vector <- c("Bad", "Good")
predictions_simple$predicted_class <- factor(predictions_simple$predicted_class,levels=factor_vector)
#this function converts probabilities to classes, threshold can be set to improve overal accuracy if (experiment)
probToClass <- function(pred){
pred <- data.frame(pred)
result_df <- data.frame(predicted_class = ifelse(pred$Good >= 0.5, "Good", "Bad"))
return(result_df)
}
#convert classes and target classes to an accuracy measure
getAcc <- function(target_class, pred_class){
return(mean(target_class == pred_class))
}
predictions_simple <- predict(best_model_simple, wwTest) %>% probToClass()
predictions_simple_duplicated <- predict(best_model_simple_duplicated, wwTest_duplicated) %>% probToClass()
cat("Accuracy predictions simple model:", getAcc(wwTest$group,predictions_simple$predicted_class), "\n") #accuracy of simple the model on dataset with good>7.0
cat("Accuracy predictions simple model with dublicates:", getAcc(wwTest_duplicated$group,predictions_simple_duplicated$predicted_class), "\n") #accuracy of the simple model with duplicated data
# confusion matrix simple model
factor_vector <- c("Bad", "Good")
predictions_simple$predicted_class <- factor(predictions_simple$predicted_class,levels=factor_vector)
wwTest$group <- factor(wwTest$group,levels=factor_vector)
wwTest_duplicated$group <- factor(wwTest_duplicated$group,levels=factor_vector)
predictions_simple_duplicated$predicted_class <- factor(predictions_simple_duplicated$predicted_class,levels=factor_vector)
simple_model_confusion_matrix <- confusionMatrix(predictions_simple$predicted_class,wwTest$group)
simple_model_confusion_matrix_duplicated <- confusionMatrix(predictions_simple_duplicated$predicted_class,wwTest_duplicated$group) #confusion matrix simple model duplicated
simple_model_confusion_matrix
simple_model_confusion_matrix_duplicated
roc_simple <- roc(response = wwTest$group, predictor = as.numeric(predictions_simple$predicted_class == "Good"))
plot(roc_simple, col = "blue", print.auc = TRUE, auc.polygon = TRUE, main = "ROC Curve - Simple Model")
# Get variable importance
var_importance <- varImp(model_simple)
# Plot variable importance
plot(var_importance, main = "Variable Importance Plot")
#complicated models first 2 random forest, train with gridsearch for best hyperparameter settings
grid <- expand.grid(mtry = c(ncol_train-1, sqrt(ncol_train), ncol_train/2))
model <- train(group ~ ., data = wwTrain, method = "rf", trControl = trainControl(method = "repeatedcv", number=10, repeats = 3), tuneGrid =grid, metric="Accuracy")
model_duplicated <- train(group ~ ., data = wwTrain_duplicated, method = "rf", trControl = trainControl(method = "repeatedcv", number=10, repeats = 3), tuneGrid =grid, metric="Accuracy")
#complicated models first 2 random forest, train with gridsearch for best hyperparameter settings
grid <- expand.grid(mtry = c(ncol_train-1, sqrt(ncol_train), ncol_train/2))
model <- train(group ~ ., data = wwTrain, method = "rf", trControl = trainControl(method = "repeatedcv", number=10, repeats = 3), tuneGrid =grid, metric="Accuracy")
library(ggplot2)
library(tidyverse)
library(viridis)
library(ggpubr)
library(rpart)
library(psych)
library(rpart.plot)
library(randomForest)
library(magrittr)
library(caret)
library(corrplot)
library(pROC)
# Importing datasets
red_wine <- read.csv("wine+quality/winequality-red.csv", sep = ";")
white_wine <- read.csv("wine+quality/winequality-white.csv", sep = ";")
white_wine %>%  mutate(quality = as.factor(quality))
summary(white_wine)
# Function to calculate medians for multiple columns
column_medians <- function(data, group_col, columns_to_median) {
result <- data %>%
group_by({{group_col}}) %>%
summarise(n_observations = n(),
across({{columns_to_median}}, median))
return(result)
}
# Vector with all columns names
propreties <- colnames(white_wine)[1:11]
# Calculating the median of all propreties
column_medians(white_wine, quality, propreties)
white_wine %>%
ggplot(aes(x = quality))+
geom_bar()+
labs(xlab = "quality",
ylab = "count",
title = "Distribution of wine quality")+
theme_minimal()
# Function to create boxplot
make_box <- function(y_data, y_labs){
white_wine %>% ggplot(aes(y = y_data)) +
geom_boxplot(fill = "sea green") +
facet_wrap(~quality, ncol = 7) +
ylab(y_labs) +
theme(axis.text.x = element_blank())
}
# Plotting all boxplots
box_alc <- make_box(white_wine$alcohol, "Alcohol %")
box_chl <- make_box(white_wine$chlorides, "Ahlorides")
box_free_so2 <- make_box(white_wine$free.sulfur.dioxide, "Free sulfur dioxide")
box_tot_so2 <- make_box(white_wine$total.sulfur.dioxide, "Total sulfur dioxide")
box_fix_acid <- make_box(white_wine$fixed.acidity, "Fixed acidity")
box_vol_acid <- make_box(white_wine$volatile.acidity, "volatile acidity")
box_cit_acid <- make_box(white_wine$citric.acid, "Citric acid")
box_res_sug <- make_box(white_wine$residual.sugar, "Residual sugar")
box_pH <- make_box(white_wine$pH, "pH")
box_dens <- make_box(white_wine$density, "Density")
box_sulp <- make_box(white_wine$sulphates, "Sulphates")
fig2 <- ggarrange(box_cit_acid,box_vol_acid,box_fix_acid,box_tot_so2,box_free_so2, labels = c("F","G","H","I","J","K"), ncol = 3, nrow = 2)
fig1 <- ggarrange(box_alc,box_dens, box_pH, box_chl,box_res_sug, box_sulp,labels = c("A","B","C","D","E"), ncol = 3, nrow = 2)
annotate_figure(fig1, top = text_grob("Boxplots of physiochemical properties of wine",color = "black", face = "bold", size = 14), fig.lab = "Figure 1", fig.lab.face = "bold")
annotate_figure(fig2, top = text_grob("Boxplots of physiochemical properties of wine",color = "black", face = "bold", size = 14), fig.lab = "Figure 2", fig.lab.face = "bold")
# Group quality scores in good and bad levels.
white_wine <- white_wine %>%
mutate(group = factor(ifelse(quality < 6, "Bad", "Good")))
# Plot boxplots for different features based on quality group
make_box_1 <- function(y_data, y_labs){
white_wine %>% ggplot(aes(y = y_data)) +
geom_boxplot(fill = "sea green") +
facet_wrap(~group) +
ylab(y_labs) +
theme(axis.text.x = element_blank())
}
box_alc_1 <- make_box_1(white_wine$alcohol, "alcohol %")
box_chl_1 <- make_box_1(white_wine$chlorides, "chlorides")
box_free_so2_1 <- make_box_1(white_wine$free.sulfur.dioxide, "Free sulfur dioxide")
box_tot_so2_1 <- make_box_1(white_wine$total.sulfur.dioxide, "Total sulfur dioxide")
box_fix_acid_1 <- make_box_1(white_wine$fixed.acidity, "Fixed acidity")
box_vol_acid_1 <- make_box_1(white_wine$volatile.acidity, "volatile acidity")
box_cit_acid_1 <- make_box_1(white_wine$citric.acid, "Citric acid")
box_res_sug_1 <- make_box_1(white_wine$residual.sugar, "Residual sugar")
box_pH_1 <- make_box_1(white_wine$pH, "pH")
box_dens_1 <- make_box_1(white_wine$density, "Density")
box_sulp_1 <- make_box_1(white_wine$sulphates, "Sulphates")
fig2 <- ggarrange(box_cit_acid_1,box_vol_acid_1,box_fix_acid_1,box_tot_so2_1,box_free_so2_1, labels = c("F","G","H","I","J","K"), ncol = 3, nrow = 2)
fig1 <- ggarrange(box_alc_1,box_dens_1, box_pH_1, box_chl_1,box_res_sug_1, box_sulp_1,labels = c("A","B","C","D","E"), ncol = 3, nrow = 2)
annotate_figure(fig1, top = text_grob("Boxplots of physiochemical properties of wine",color = "black", face = "bold", size = 14),
fig.lab = "Figure 1", fig.lab.face = "bold")
annotate_figure(fig2, top = text_grob("Boxplots of physiochemical properties of wine",color = "black", face = "bold", size = 14),
fig.lab = "Figure 2", fig.lab.face = "bold")
number_bad <- white_wine %>% filter(group == "Bad") %>% nrow()
number_good <- white_wine %>% filter(group == "Good") %>% nrow()
number_bad
number_good
cor_matrix <- cor(white_wine[,c(1:12)])
cor_matrix
corrplot(cor_matrix, type = "upper",
method = "square",
addCoef.col = "black",
tl.cex = 0.6,
number.cex = 0.6,
tl.col = "black", tl.srt = 45,
)
white_wine %>%
ggplot(aes(x = volatile.acidity, y = fixed.acidity, color = quality))+
geom_point()+
scale_color_viridis()+
labs(xlab = "volatile acidity",
ylab = "fixed acidity",
title = "Effect of acidity on quality")+
theme_minimal()+
facet_wrap(.~ group)
white_wine %>%
ggplot(aes(x = pH, y = citric.acid, color = quality))+
geom_point()+
scale_color_viridis()+
labs(xlab = "volatile acidity",
ylab = "Citric acidity",
title = "Effect of acidity on quality")+
theme_minimal()+
facet_wrap(.~ group)
white_wine %>%
ggplot(aes(x = density, y = alcohol, color = quality))+
geom_point(aes(alpha = 0.8))+
scale_color_viridis()+
labs(xlab = "density",
ylab = "alcohol",
title = "Effect of alcohol % on quality")+
theme_minimal()+
facet_wrap(.~ group)
# Option 1 making the harder predictor "good", since most datapoints are considered bad wines in this case
white_wine <- white_wine %>%
mutate(group = factor(ifelse(quality < 7, "Bad", "Good")))
# Option 2 duplicating the "Bad" grouped wines to correct for the skewness of the data.
white_wine_duplicated <- white_wine %>%
mutate(group = factor(ifelse(quality < 6, "Bad", "Good")))
bad_indices <- which(white_wine_duplicated$group == "Bad")
# Duplicate the "Bad" class instances
duplicated_data <- white_wine_duplicated[bad_indices, ]
# Combine the duplicated instances with the original dataset
balanced_data <- rbind(white_wine_duplicated, duplicated_data)
white_wine_duplicated <- balanced_data
Original <- white_wine %>%
ggplot(aes(x = quality))+
geom_bar(fill = "dark grey")+
labs(xlab = "quality",
ylab = "count",
title = "Distribution of wine quality scores")+
theme_minimal()
Option1 <- white_wine_duplicated %>%
ggplot(aes(x = quality, fill = group))+
geom_bar()+
#facet_wrap(~group)+
labs(xlab = "quality",
ylab = "count",
title = "After duplication of Bad group" )+
theme_minimal()
Option2 <- white_wine %>%
ggplot(aes(x = quality, fill = group))+
geom_bar()+
#facet_wrap(~group)+
labs(xlab = "quality",
ylab = "count",
title = "After change of Good/Bad cut-off (<7)")+
theme_minimal()
supp.fig1 <- ggarrange(Original, ggarrange(Option1, Option2, labels = c("B","C"), ncol=2), nrow = 2, labels = "A")
annotate_figure(supp.fig1, top = text_grob("Dataset distribution of white wines", color = "black", face = "bold", size = 14))
set.seed(123)
white_wine <- white_wine %>%
select(!(quality))
white_wine <- white_wine %>%
mutate(split = sample(c(rep("Test",490), rep("Train", 4408))))
#Remove the quality score to prevent basing the classification on the quality score.
white_wine_duplicated <- white_wine_duplicated %>%
select(!(quality))
white_wine_duplicated <- white_wine_duplicated %>%
mutate(split = sample(c(rep("Test",653), rep("Train", 5885))))
#all datasets (dataset with bad classification if <7 or <6 but with bad instances duplicated for even distribution)
wwTrain <- white_wine %>% filter(split =="Train") %>%subset(select = -split)
wwTest <- white_wine %>% filter(split =="Test") %>% subset(select=-split)
wwTrain_duplicated <- white_wine_duplicated %>% filter(split =="Train") %>% subset(select = -split)
wwTest_duplicated <- white_wine_duplicated %>% filter(split =="Test") %>% subset(select= -split)
ncol_train <- ncol(wwTrain)
ncol_train_duplicated <- ncol(wwTrain_duplicated)
#simple models grid search
grid_simple <- expand.grid(cp = c(0.01, 0.001, 1, 0.1))
model_simple <- train(group ~ ., data = wwTrain, method = "rpart", trControl = trainControl(method = "repeatedcv",number = 10, repeats = 3), metric = "Accuracy", tuneGrid = grid_simple)
model_simple_duplicated <- train(group ~ ., data = wwTrain_duplicated, method = "rpart", trControl = trainControl(method = "repeatedcv",number = 10, repeats = 3), metric="Accuracy", tuneGrid = grid_simple)
#choose the best model with settings
best_model_simple <- model_simple$finalModel
best_model_simple_duplicated <- model_simple_duplicated$finalModel
#this function converts probabilities to classes, threshold can be set to improve overal accuracy if (experiment)
probToClass <- function(pred){
pred <- data.frame(pred)
result_df <- data.frame(predicted_class = ifelse(pred$Good >= 0.5, "Good", "Bad"))
return(result_df)
}
#convert classes and target classes to an accuracy measure
getAcc <- function(target_class, pred_class){
return(mean(target_class == pred_class))
}
predictions_simple <- predict(best_model_simple, wwTest) %>% probToClass()
predictions_simple_duplicated <- predict(best_model_simple_duplicated, wwTest_duplicated) %>% probToClass()
cat("Accuracy predictions simple model:", getAcc(wwTest$group,predictions_simple$predicted_class), "\n") #accuracy of simple the model on dataset with good>7.0
cat("Accuracy predictions simple model with dublicates:", getAcc(wwTest_duplicated$group,predictions_simple_duplicated$predicted_class), "\n") #accuracy of the simple model with duplicated data
# confusion matrix simple model
factor_vector <- c("Bad", "Good")
predictions_simple$predicted_class <- factor(predictions_simple$predicted_class,levels=factor_vector)
wwTest$group <- factor(wwTest$group,levels=factor_vector)
wwTest_duplicated$group <- factor(wwTest_duplicated$group,levels=factor_vector)
predictions_simple_duplicated$predicted_class <- factor(predictions_simple_duplicated$predicted_class,levels=factor_vector)
simple_model_confusion_matrix <- confusionMatrix(predictions_simple$predicted_class,wwTest$group)
simple_model_confusion_matrix_duplicated <- confusionMatrix(predictions_simple_duplicated$predicted_class,wwTest_duplicated$group) #confusion matrix simple model duplicated
simple_model_confusion_matrix
simple_model_confusion_matrix_duplicated
roc_simple <- roc(response = wwTest$group, predictor = as.numeric(predictions_simple$predicted_class == "Good"))
plot(roc_simple, col = "blue", print.auc = TRUE, auc.polygon = TRUE, main = "ROC Curve - Simple Model")
# Get variable importance
var_importance <- varImp(model_simple)
# Plot variable importance
plot(var_importance, main = "Variable Importance Plot")
#complicated models first 2 random forest, train with gridsearch for best hyperparameter settings
grid <- expand.grid(mtry = c(ncol_train-1, sqrt(ncol_train), ncol_train/2))
model <- train(group ~ ., data = wwTrain, method = "rf", trControl = trainControl(method = "repeatedcv", number=10, repeats = 3), tuneGrid =grid, metric="Accuracy")
model_duplicated <- train(group ~ ., data = wwTrain_duplicated, method = "rf", trControl = trainControl(method = "repeatedcv", number=10, repeats = 3), tuneGrid =grid, metric="Accuracy")
mtry1 <- model$results %>%
ggplot(aes(x = mtry, y = Accuracy))+
geom_point()+
geom_smooth()+
theme_minimal()+
ylim(.8,.9)
mtry2 <- model_duplicated$results %>%
ggplot(aes(x = mtry, y = Accuracy))+
geom_point()+
geom_smooth()+
theme_minimal()+
ylim(.85,.95)
fig3 <- ggarrange(mtry1,mtry2, labels = c("A","B"), ncol = 1, nrow = 2 )
annotate_figure(fig3, top = text_grob("Hyperparameter gridsearch results", color = "black", face = "bold", size = 14))
best_model <- model$finalModel
best_model_duplicated <- model_duplicated$finalModel
predictions <- predict(best_model, wwTest)
predictions_duplicated <- predict(best_model_duplicated, wwTest_duplicated)
cat("Accuracy predictions complex model:", getAcc(wwTest$group,predictions), "\n") #accuracy of complex model good>7.0
cat("Accuracy predictions complex model with duplicates:", getAcc(wwTest_duplicated$group,predictions_duplicated), "\n") #acc of complex model duplicated data
#confusion matrix complex model
model_confusion_matrix <- confusionMatrix(predictions,wwTest$group)
model_confusion_dubplicated <- confusionMatrix(predictions_duplicated,wwTest_duplicated$group) #confusion matrix complex model duplicated
model_confusion_dubplicated
model_confusion_matrix
roc_complex <- roc(response = wwTest$group, predictor = as.numeric(predictions == "Good"))
plot(roc_complex, col = "blue", print.auc = TRUE, auc.polygon = TRUE, main = "ROC Curve - Complex")
# Get variable importance
var_importance <- varImp(model)
# Plot variable importance
plot(var_importance, main = "Variable Importance Plot")
roc_complex <- roc(response = wwTest_duplicated$group, predictor = as.numeric(predictions == "Good"))
roc_complex <- roc(response = wwTest$group, predictor = as.numeric(predictions == "Good"))
plot(roc_complex, col = "blue", print.auc = TRUE, auc.polygon = TRUE, main = "ROC Curve - Complex")
roc_complex <- roc(response = wwTest_duplicated$group, predictor = as.numeric(predictions_duplicated == "Good"))
plot(roc_complex, col = "blue", print.auc = TRUE, auc.polygon = TRUE, main = "ROC Curve - Complex")
roc_complex <- roc(response = wwTest$group, predictor = as.numeric(predictions == "Good"))
plot(roc_complex, col = "blue", print.auc = TRUE, auc.polygon = TRUE, main = "ROC Curve - Complex")
roc_complex_duplicated <- roc(response = wwTest_duplicated$group, predictor = as.numeric(predictions_duplicated == "Good"))
plot(roc_complex_duplicated, col = "blue", print.auc = TRUE, auc.polygon = TRUE, main = "ROC Curve - Complex (duplicated)")
roc_simple <- roc(response = wwTest$group, predictor = as.numeric(predictions_simple$predicted_class == "Good"))
plot(roc_simple, col = "blue", print.auc = TRUE, auc.polygon = TRUE, main = "ROC Curve - Simple Model")
roc_simple_duplicated <- roc(response = wwTest_duplicated$group, predictor = as.numeric(predictions_simple_duplicated$predicted_class == "Good"))
plot(roc_simple_duplicated, col = "blue", print.auc = TRUE, auc.polygon = TRUE, main = "ROC Curve - Simple Model")
#confusion matrix complex model
model_confusion_matrix <- confusionMatrix(predictions,wwTest$group)
model_confusion_dubplicated <- confusionMatrix(predictions_duplicated,wwTest_duplicated$group) #confusion matrix complex model duplicated
model_confusion_matrix
model_confusion_dubplicated
# Importing datasets
red_wine <- read.csv("wine+quality/winequality-red.csv", sep = ";")
white_wine <- read.csv("wine+quality/winequality-white.csv", sep = ";") %>% mutate(quality = as.factor(quality))
library(ggplot2)
library(tidyverse)
library(viridis)
library(ggpubr)
library(rpart)
library(psych)
library(rpart.plot)
library(randomForest)
library(magrittr)
library(caret)
library(corrplot)
library(pROC)
# Importing datasets
red_wine <- read.csv("wine+quality/winequality-red.csv", sep = ";")
white_wine <- read.csv("wine+quality/winequality-white.csv", sep = ";") %>% mutate(quality = as.factor(quality))
# Function to calculate medians for multiple columns
column_medians <- function(data, group_col, columns_to_median) {
result <- data %>%
group_by({{group_col}}) %>%
summarise(n_observations = n(),
across({{columns_to_median}}, median))
return(result)
}
# Vector with all columns names
propreties <- colnames(white_wine)[1:11]
# Calculating the median of all propreties
column_medians(white_wine, quality, propreties)
cor_matrix
c(1:12)
as.numeric(c(1:12))
cor_matrix <- cor(white_wine[,as.numeric(c(1:12))])
cor_matrix <- cor(white_wine[,c(1:12)])
cor_matrix <- cor(white_wine[.,c(1:12)])
cor_matrix <- cor(white_wine[,c(1:12)])
library(ggplot2)
library(tidyverse)
library(viridis)
library(ggpubr)
library(rpart)
library(psych)
library(rpart.plot)
library(randomForest)
library(magrittr)
library(caret)
library(corrplot)
library(pROC)
# Importing datasets
red_wine <- read.csv("wine+quality/winequality-red.csv", sep = ";")
white_wine <- read.csv("wine+quality/winequality-white.csv", sep = ";") %>% mutate(quality = as.factor(quality))
summary(white_wine)
# Function to calculate medians for multiple columns
column_medians <- function(data, group_col, columns_to_median) {
result <- data %>%
group_by({{group_col}}) %>%
summarise(n_observations = n(),
across({{columns_to_median}}, median))
return(result)
}
# Vector with all columns names
propreties <- colnames(white_wine)[1:11]
# Calculating the median of all propreties
column_medians(white_wine, quality, propreties)
white_wine %>%
ggplot(aes(x = quality))+
geom_bar()+
labs(xlab = "quality",
ylab = "count",
title = "Distribution of wine quality")+
theme_minimal()
# Function to create boxplot
make_box <- function(y_data, y_labs){
white_wine %>% ggplot(aes(y = y_data)) +
geom_boxplot(fill = "sea green") +
facet_wrap(~quality, ncol = 7) +
ylab(y_labs) +
theme(axis.text.x = element_blank())
}
# Plotting all boxplots
box_alc <- make_box(white_wine$alcohol, "Alcohol %")
box_chl <- make_box(white_wine$chlorides, "Ahlorides")
box_free_so2 <- make_box(white_wine$free.sulfur.dioxide, "Free sulfur dioxide")
box_tot_so2 <- make_box(white_wine$total.sulfur.dioxide, "Total sulfur dioxide")
box_fix_acid <- make_box(white_wine$fixed.acidity, "Fixed acidity")
box_vol_acid <- make_box(white_wine$volatile.acidity, "volatile acidity")
box_cit_acid <- make_box(white_wine$citric.acid, "Citric acid")
box_res_sug <- make_box(white_wine$residual.sugar, "Residual sugar")
box_pH <- make_box(white_wine$pH, "pH")
box_dens <- make_box(white_wine$density, "Density")
box_sulp <- make_box(white_wine$sulphates, "Sulphates")
fig2 <- ggarrange(box_cit_acid,box_vol_acid,box_fix_acid,box_tot_so2,box_free_so2, labels = c("F","G","H","I","J","K"), ncol = 3, nrow = 2)
fig1 <- ggarrange(box_alc,box_dens, box_pH, box_chl,box_res_sug, box_sulp,labels = c("A","B","C","D","E"), ncol = 3, nrow = 2)
annotate_figure(fig1, top = text_grob("Boxplots of physiochemical properties of wine",color = "black", face = "bold", size = 14), fig.lab = "Figure 1", fig.lab.face = "bold")
annotate_figure(fig2, top = text_grob("Boxplots of physiochemical properties of wine",color = "black", face = "bold", size = 14), fig.lab = "Figure 2", fig.lab.face = "bold")
# Group quality scores in good and bad levels.
white_wine <- white_wine %>%
mutate(group = factor(ifelse(quality < 6, "Bad", "Good")))
# Plot boxplots for different features based on quality group
make_box_1 <- function(y_data, y_labs){
white_wine %>% ggplot(aes(y = y_data)) +
geom_boxplot(fill = "sea green") +
facet_wrap(~group) +
ylab(y_labs) +
theme(axis.text.x = element_blank())
}
box_alc_1 <- make_box_1(white_wine$alcohol, "alcohol %")
box_chl_1 <- make_box_1(white_wine$chlorides, "chlorides")
box_free_so2_1 <- make_box_1(white_wine$free.sulfur.dioxide, "Free sulfur dioxide")
box_tot_so2_1 <- make_box_1(white_wine$total.sulfur.dioxide, "Total sulfur dioxide")
box_fix_acid_1 <- make_box_1(white_wine$fixed.acidity, "Fixed acidity")
box_vol_acid_1 <- make_box_1(white_wine$volatile.acidity, "volatile acidity")
box_cit_acid_1 <- make_box_1(white_wine$citric.acid, "Citric acid")
box_res_sug_1 <- make_box_1(white_wine$residual.sugar, "Residual sugar")
box_pH_1 <- make_box_1(white_wine$pH, "pH")
box_dens_1 <- make_box_1(white_wine$density, "Density")
box_sulp_1 <- make_box_1(white_wine$sulphates, "Sulphates")
fig2 <- ggarrange(box_cit_acid_1,box_vol_acid_1,box_fix_acid_1,box_tot_so2_1,box_free_so2_1, labels = c("F","G","H","I","J","K"), ncol = 3, nrow = 2)
fig1 <- ggarrange(box_alc_1,box_dens_1, box_pH_1, box_chl_1,box_res_sug_1, box_sulp_1,labels = c("A","B","C","D","E"), ncol = 3, nrow = 2)
annotate_figure(fig1, top = text_grob("Boxplots of physiochemical properties of wine",color = "black", face = "bold", size = 14),
fig.lab = "Figure 1", fig.lab.face = "bold")
annotate_figure(fig2, top = text_grob("Boxplots of physiochemical properties of wine",color = "black", face = "bold", size = 14),
fig.lab = "Figure 2", fig.lab.face = "bold")
number_bad <- white_wine %>% filter(group == "Bad") %>% nrow()
number_good <- white_wine %>% filter(group == "Good") %>% nrow()
number_bad
number_good
cor_matrix <- cor(white_wine[,c(1:12)])
